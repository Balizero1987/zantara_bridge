openapi: 3.1.0
info:
  title: Zantara Bridge API
  version: "2.1.0"
  description: >
    Zantara Bridge — versione stabile con Domain‑Wide Delegation (DWD) attiva.
    Tutti gli endpoint Drive che scrivono usano impersonation (IMPERSONATE_USER).
  contact:
    name: Bali Zero HQ
    email: zero@balizero.com
  license:
    name: Proprietary

servers:
  - url: https://zantara-bridge-v2-prod-1064094238013.asia-southeast2.run.app
    description: Production (Cloud Run)
  - url: http://localhost:8080
    description: Development

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: Required API key for authentication

  schemas:
    ErrorResponse:
      type: object
      properties:
        ok: { type: boolean, default: false }
        error: { type: string, description: "Error message" }
        details: { type: string, description: "Additional error context" }
        code: { type: integer, description: "HTTP status code" }

    HealthResponse:
      type: object
      properties:
        status: { type: string, example: "OK" }
        uptime: { type: integer, description: "Uptime in seconds" }
        requests: { type: integer }
        errorRate: { type: string, example: "0%" }
        avgResponseTime: { type: string, example: "12526ms" }
        timestamp: { type: string, format: date-time }

    MonitoringResponse:
      type: object
      properties:
        ok: { type: boolean }
        monitoring:
          type: object
          properties:
            openai:
              type: object
              properties:
                ok: { type: boolean }
                model: { type: string }
                id: { type: string }
                error: { type: string }
            drive:
              type: object
              properties:
                ok: { type: boolean }
                user:
                  type: object
                  properties:
                    emailAddress: { type: string, example: "zero@balizero.com" }
                    displayName: { type: string, example: "Bali Zero HQ" }
                quota:
                  type: object
                  properties:
                    limit: { type: string, example: "676457349120" }
                    usage: { type: string, example: "33827270606" }
                    usageInDrive: { type: string }
                    usageInDriveTrash: { type: string }
                isImpersonated: { type: boolean, example: true, description: "True when DWD is active" }
                impersonateUser: { type: string, example: "zero@balizero.com" }
                error: { type: string }
        ts: { type: string, format: date-time }

    ChatRequest:
      type: object
      required: [message]
      properties:
        message: { type: string, description: "User message to process" }
        mode: { type: string, enum: [RIRI], description: "Special processing mode" }
        conversationId: { type: string, description: "Optional conversation ID for context" }
        saveAs: { type: string, enum: [chat, note, brief], description: "How to save the conversation" }
        title: { type: string, description: "Optional title for saved conversation" }

    ChatResponse:
      type: object
      properties:
        ok: { type: boolean }
        text: { type: string, description: "AI response" }
        responseTime: { type: number, description: "Response time in ms" }
        savedAs: { type: string }
        owner: { type: string }
        conversationId: { type: string }

    Note:
      type: object
      properties:
        id: { type: string }
        canonicalOwner: { type: string, example: "BOSS" }
        title: { type: string }
        content: { type: string }
        ts: { type: integer, description: "epoch ms" }
        dateKey: { type: string, description: "YYYY-MM-DD" }
        tags:
          type: array
          items: { type: string }

    NoteCreate:
      type: object
      required: [title, content]
      properties:
        title: { type: string }
        content: { type: string }
        tags:
          type: array
          items: { type: string }

    NoteListResponse:
      type: object
      properties:
        ok: { type: boolean }
        count: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/Note' }

    DriveFile:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        mimeType: { type: string }
        webViewLink: { type: string, format: uri }
        createdTime: { type: string, format: date-time }
        parents:
          type: array
          items: { type: string }

    UploadRequest:
      type: object
      required: [filename, content]
      properties:
        filename: { type: string }
        content:
          type: string
          description: |
            File content. For text types, raw text is accepted.
            For binary (e.g., docx), provide Base64.
        mimeType: { type: string, example: "text/plain", description: "Optional MIME type" }
        folderId: { type: string, description: "Target parent folder ID" }
        driveId: { type: string, description: "Shared Drive ID if targeting a shared drive" }
        supportsAllDrives: { type: boolean, default: true }

    UploadResponse:
      type: object
      properties:
        id: { type: string, description: "File ID in Drive" }
        name: { type: string }
        webViewLink: { type: string, format: uri }

    SearchDriveRequest:
      type: object
      properties:
        query: { type: string, description: "Name contains. Empty lists all children when folderId is provided." }
        fileType: { type: string, description: "Filter by mimeType" }
        modifiedAfter: { type: string, format: date-time }
        folderId: { type: string, description: "If set, list within this folder" }
        includeFiles: { type: boolean, default: true }
        includeFolders: { type: boolean, default: true }
        driveId: { type: string, description: "Optional Shared Drive context (uses corpora=drive)" }

    SearchDriveResponse:
      type: object
      properties:
        files:
          type: array
          items: { $ref: '#/components/schemas/DriveFile' }
        count: { type: integer }
        query: { type: string }
        userId: { type: string, example: "zero@balizero.com", description: "Impersonated user" }
        folderId: { type: string }
        error: { type: string }

    MemorySaveRequest:
      type: object
      required: [title, content]
      properties:
        title: { type: string }
        content: { type: string }
        tags:
          type: array
          items: { type: string }
        folderId: { type: string, description: "Optional folder inside Shared Drive (defaults to MEMORY)" }
        driveId: { type: string, description: "Shared Drive ID; defaults to SHARED_DRIVE_MEMORY_ID env var" }
        supportsAllDrives: { type: boolean, default: true }

    MemorySaveResponse:
      type: object
      properties:
        ok: { type: boolean, default: true }
        id: { type: string, description: "File ID in Drive" }
        name: { type: string, description: "Generated filename" }
        webViewLink: { type: string, format: uri }
        error: { type: string }

    DocgenRequest:
      type: object
      required: [title, content]
      properties:
        title: { type: string }
        content: { type: string, description: "Document content (markdown supported)" }
        format: { type: string, enum: [docx], default: docx }

    DocgenResponse:
      type: object
      properties:
        owner: { type: string, example: "BOSS" }
        dateKey: { type: string, description: "YYYY-MM-DD" }
        fileName: { type: string, example: "Brief-2025-09-17.docx" }
        docxBase64: { type: string, description: "Base64-encoded .docx" }
        size: { type: integer }
        error: { type: string }

    BriefRequest:
      type: object
      required: [topic, details]
      properties:
        topic: { type: string }
        details: { type: string }
        template: { type: string, enum: [business, technical, creative], default: business }
        folderId: { type: string, description: "Optional override; defaults to DRIVE_FOLDER_AMBARADAM env var" }

    BriefResponse:
      type: object
      properties:
        ok: { type: boolean }
        fileId: { type: string }
        fileName: { type: string }
        webViewLink: { type: string, format: uri }
        error: { type: string }

security:
  - ApiKeyAuth: []

paths:
  /health:
    get:
      operationId: getHealth
      summary: Public health check
      tags: [System]
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/monitoring:
    get:
      operationId: getMonitoring
      summary: Internal monitoring (OpenAI + Drive impersonation)
      tags: [System]
      responses:
        "200":
          description: Monitoring status with impersonation check
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/chat:
    post:
      operationId: chatWithAI
      summary: Main chat endpoint with contextual AI
      tags: [AI]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        "200":
          description: AI response generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/notes:
    get:
      operationId: listNotes
      summary: Retrieve user notes from Firestore
      tags: [Notes]
      parameters:
        - in: query
          name: owner
          schema: { type: string }
          description: Filter by owner (defaults to X-BZ-USER header or 'BOSS')
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        "200":
          description: Notes retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResponse'

    post:
      operationId: createNote
      summary: Create a new note in Firestore
      tags: [Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses:
        "201":
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /actions/drive/upload:
    post:
      operationId: uploadDriveFile
      summary: Upload file to Drive (uses impersonation)
      tags: [Drive]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        "200":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/search/drive:
    post:
      operationId: searchDriveFiles
      summary: Search/list files in Drive (uses impersonation)
      tags: [Drive]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchDriveRequest'
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDriveResponse'
        "500":
          description: Search failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/files/{fileId}:
    delete:
      operationId: deleteDriveFile
      summary: Delete file from Drive (uses impersonation)
      tags: [Drive]
      parameters:
        - in: path
          name: fileId
          required: true
          schema: { type: string }
          description: Drive file ID to delete
        - in: query
          name: supportsAllDrives
          schema: { type: boolean, default: true }
          description: Support for Shared Drives
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, default: true }
                  message: { type: string }
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /actions/memory/save:
    post:
      operationId: saveMemory
      summary: Save memory to Shared Drive (uses impersonation)
      tags: [Memory]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemorySaveRequest'
      responses:
        "200":
          description: Memory saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemorySaveResponse'
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Save failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/docgen:
    post:
      operationId: generateDocument
      summary: Generate a DOCX document
      tags: [Documents]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocgenRequest'
      responses:
        "200":
          description: Document generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocgenResponse'
        "400":
          description: Unsupported format (only 'docx' is supported)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/drive/brief:
    post:
      operationId: generateBrief
      summary: Generate and upload brief to Drive (uses impersonation)
      tags: [Documents]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BriefRequest'
      responses:
        "200":
          description: Brief generated and uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BriefResponse'
        "500":
          description: Missing folderId or DRIVE_FOLDER_AMBARADAM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: System
    description: Health checks and monitoring
  - name: AI
    description: AI-powered chat and conversation
  - name: Drive
    description: Google Drive operations (with impersonation)
  - name: Memory
    description: Memory management in Shared Drives
  - name: Notes
    description: Note management in Firestore
  - name: Documents
    description: Document generation and briefs

x-readme:
  dwd-status: |
    Domain-Wide Delegation (DWD) is ACTIVE.
    Service Account: zantara-bridge@involuted-box-469105-r0.iam.gserviceaccount.com
    Impersonates: zero@balizero.com (configured via IMPERSONATE_USER env var)
    All Drive write operations use this impersonated identity.