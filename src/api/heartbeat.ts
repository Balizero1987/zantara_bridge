import { Router, Request, Response } from "express";
import { listDriveFiles } from "../services/driveUpload";
import { redisHealthEndpoint } from "../lib/redis";

const router = Router();

/**
 * GET /api/heartbeat
 * Restituisce l'ultimo salvataffio (heartbeat) salvato in AMBARADAM
 */
router.get("/", async (req: Request, res: Response) => {
  try {
    // Search for heartbeat files in AMBARADAM
    const files = await listDriveFiles("ZANTARA_SYSTEM", 10);
    
    // Filter for heartbeat files
    const heartbeatFiles = files.filter(file => 
      file.name?.toLowerCase().includes('heartbeat') || 
      file.name?.toLowerCase().includes('salvataffio')
    );
    
    if (heartbeatFiles.length === 0) {
      return res.json({
        ok: false,
        message: "Nessun heartbeat trovato.",
        info: "Il cron job potrebbe non essere ancora stato eseguito"
      });
    }

    // Get the most recent heartbeat
    const latestHeartbeat = heartbeatFiles[0];
    
    // Calculate time since last heartbeat
    const createdTime = new Date(latestHeartbeat.createdTime || 0);
    const now = new Date();
    const hoursAgo = Math.floor((now.getTime() - createdTime.getTime()) / (1000 * 60 * 60));
    
    // Determine system health
    let status = "healthy";
    let statusEmoji = "‚úÖ";
    
    if (hoursAgo > 48) {
      status = "unhealthy";
      statusEmoji = "‚ùå";
    } else if (hoursAgo > 30) {
      status = "warning";
      statusEmoji = "‚ö†Ô∏è";
    }

    return res.json({
      ok: true,
      status,
      statusEmoji,
      heartbeat: {
        id: latestHeartbeat.id,
        name: latestHeartbeat.name,
        createdTime: latestHeartbeat.createdTime,
        webViewLink: latestHeartbeat.webViewLink,
        size: latestHeartbeat.size
      },
      timeSinceLastHeartbeat: `${hoursAgo} hours ago`,
      totalHeartbeats: heartbeatFiles.length,
      message: `${statusEmoji} Last heartbeat: ${hoursAgo}h ago. System ${status}.`
    });
    
  } catch (err: any) {
    console.error("‚ùå Errore heartbeat:", err.message);
    return res.status(500).json({ 
      ok: false, 
      error: err.message,
      message: "Errore nel controllo heartbeat"
    });
  }
});

/**
 * POST /api/heartbeat/test
 * Trigger manual heartbeat for testing
 */
router.post("/test", async (req: Request, res: Response) => {
  try {
    const { uploadTextAsDoc } = require("../services/driveUpload");
    
    const timestamp = new Date().toISOString();
    const testContent = `üß™ ZANTARA MANUAL HEARTBEAT TEST
==========================================
Triggered: ${timestamp}
Type: Manual Test
Requested by: API endpoint

‚úÖ TESTING:
- Drive Integration
- OAuth Delegation  
- AMBARADAM Access
- Document Upload

This is a manual heartbeat test triggered via API.
Normal heartbeats run automatically at 03:00 daily.

---
Generated by /api/heartbeat/test endpoint`;

    const result = await uploadTextAsDoc(
      testContent,
      `Manual Heartbeat Test ‚Äì ${timestamp}`,
      "ZANTARA_API_TEST"
    );

    return res.json({
      ok: true,
      result,
      message: "Manual heartbeat test completed successfully",
      timestamp
    });

  } catch (err: any) {
    console.error("‚ùå Errore manual heartbeat test:", err.message);
    return res.status(500).json({ 
      ok: false, 
      error: err.message,
      message: "Manual heartbeat test failed"
    });
  }
});

/**
 * GET /api/heartbeat/history
 * Get heartbeat history
 */
router.get("/history", async (req: Request, res: Response) => {
  try {
    const { limit = 20 } = req.query;
    const limitNum = parseInt(limit as string) || 20;
    
    // Get all heartbeat files
    const files = await listDriveFiles("ZANTARA_SYSTEM", limitNum * 2);
    
    // Filter and sort heartbeat files
    const heartbeatFiles = files
      .filter(file => 
        file.name?.toLowerCase().includes('heartbeat') || 
        file.name?.toLowerCase().includes('salvataffio')
      )
      .slice(0, limitNum);
    
    const history = heartbeatFiles.map(file => ({
      id: file.id,
      name: file.name,
      createdTime: file.createdTime,
      size: file.size,
      type: file.name?.includes('Manual') ? 'manual' : 'automatic',
      webViewLink: file.webViewLink
    }));

    return res.json({
      ok: true,
      history,
      count: history.length,
      message: `Retrieved ${history.length} heartbeat records`
    });

  } catch (err: any) {
    console.error("‚ùå Errore heartbeat history:", err.message);
    return res.status(500).json({ 
      ok: false, 
      error: err.message,
      message: "Failed to retrieve heartbeat history"
    });
  }
});

/**
 * GET /api/heartbeat/redis
 * Redis health check and connection status
 */
router.get("/redis", async (req: Request, res: Response) => {
  try {
    const health = await redisHealthEndpoint();
    
    return res.json({
      ok: health.redis.status === 'connected',
      ...health,
      timestamp: new Date().toISOString()
    });
    
  } catch (err: any) {
    console.error("‚ùå Redis health check error:", err.message);
    return res.status(500).json({ 
      ok: false, 
      error: err.message,
      redis: { status: 'error' },
      timestamp: new Date().toISOString()
    });
  }
});

export default router;