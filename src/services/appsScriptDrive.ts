/**
 * Google Apps Script Drive API wrapper
 * Provides simplified Drive operations via Apps Script Web App
 */

export interface AppsScriptResponse {
  ok: boolean;
  action?: string;
  fileId?: string;
  webViewLink?: string;
  files?: Array<{ id: string; name: string; url: string }>;
  error?: string;
  query?: string;
}

export interface DriveFile {
  id: string;
  name: string;
  url: string;
}

export class AppsScriptDriveService {
  private scriptUrl: string;

  constructor(scriptUrl?: string) {
    this.scriptUrl = scriptUrl || process.env.APPS_SCRIPT_URL || '';
    if (!this.scriptUrl) {
      console.warn('APPS_SCRIPT_URL not configured - Apps Script Drive features disabled');
    }
  }

  private async makeRequest(payload: any): Promise<AppsScriptResponse> {
    if (!this.scriptUrl) {
      throw new Error('Apps Script URL not configured - cannot make request');
    }
    
    try {
      const response = await fetch(this.scriptUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return result as AppsScriptResponse;
    } catch (error: any) {
      console.error('Apps Script request failed:', error);
      throw new Error(`Apps Script error: ${error.message}`);
    }
  }

  /**
   * Upload a file to Google Drive
   */
  async uploadFile(fileName: string, content: string, folderId?: string, user?: string): Promise<AppsScriptResponse> {
    return this.makeRequest({
      action: 'upload',
      fileName,
      content,
      folderId,
      user,
    });
  }

  /**
   * List files in a folder
   */
  async listFiles(folderId?: string): Promise<AppsScriptResponse> {
    return this.makeRequest({
      action: 'list',
      folderId,
    });
  }

  /**
   * Search files by name
   */
  async searchFiles(query: string, folderId?: string): Promise<AppsScriptResponse> {
    return this.makeRequest({
      action: 'search',
      query,
      folderId,
    });
  }

  /**
   * Delete a file (move to trash)
   */
  async deleteFile(fileId: string): Promise<AppsScriptResponse> {
    return this.makeRequest({
      action: 'delete',
      fileId,
    });
  }

  /**
   * Upload a chat message to Drive with ZANTARA format
   */
  async uploadChatMessage(options: {
    chatId: string;
    author: string;
    text: string;
    title?: string;
    folderId?: string;
  }): Promise<AppsScriptResponse> {
    const { chatId, author, text, title, folderId } = options;
    const timestamp = new Date().toISOString();
    const fileName = `${title || 'Chat'}_${chatId}_${Date.now()}.txt`;
    
    const content = `ZANTARA CHAT LOG
================
Title: ${title || 'Chat ZANTARA'}
Chat ID: ${chatId}
Author: ${author}
Timestamp: ${timestamp}

${text}

---
Generated by ZANTARA Bridge
${timestamp}`;

    return this.uploadFile(fileName, content, folderId, author);
  }

  /**
   * Upload a note to Drive with ZANTARA format
   */
  async uploadNote(options: {
    owner: string;
    text: string;
    title?: string;
    folderId?: string;
  }): Promise<AppsScriptResponse> {
    const { owner, text, title, folderId } = options;
    const timestamp = new Date().toISOString();
    const fileName = `Note_${owner}_${Date.now()}.txt`;
    
    const content = `ZANTARA NOTE
============
Title: ${title || 'Nota ZANTARA'}
Owner: ${owner}
Created: ${timestamp}

${text}

---
Generated by ZANTARA Bridge
${timestamp}`;

    return this.uploadFile(fileName, content, folderId, owner);
  }

  /**
   * Upload a brief document to Drive
   */
  async uploadBrief(options: {
    owner: string;
    text: string;
    title?: string;
    folderId?: string;
  }): Promise<AppsScriptResponse> {
    const { owner, text, title, folderId } = options;
    const timestamp = new Date().toISOString();
    const fileName = `Brief_${owner}_${Date.now()}.txt`;
    
    const content = `ZANTARA BRIEF
=============
Title: ${title || 'Brief ZANTARA'}
Owner: ${owner}
Generated: ${timestamp}

${text}

---
Generated by ZANTARA Bridge
${timestamp}`;

    return this.uploadFile(fileName, content, folderId, owner);
  }
}

// Helper to extract user from request
export function extractUserFromRequest(req: any): string {
  // Try different sources for user information
  return req.canonicalOwner || 
         req.header?.('X-BZ-USER') || 
         req.headers?.['x-bz-user'] || 
         req.body?.user || 
         'unknown';
}

// Default instance with AMBARADAM folder
export const driveService = new AppsScriptDriveService();

// AMBARADAM folder ID
export const AMBARADAM_FOLDER_ID = '1UGbm5er6Go351S57GQKUjmxMxHyT4QZb';

// Convenience functions with default folder
export async function uploadToAmbaradam(fileName: string, content: string) {
  return driveService.uploadFile(fileName, content, AMBARADAM_FOLDER_ID);
}

export async function uploadChatToAmbaradam(options: {
  chatId: string;
  author: string;
  text: string;
  title?: string;
}) {
  return driveService.uploadChatMessage({
    ...options,
    folderId: AMBARADAM_FOLDER_ID,
  });
}

export async function uploadNoteToAmbaradam(options: {
  owner: string;
  text: string;
  title?: string;
}) {
  return driveService.uploadNote({
    ...options,
    folderId: AMBARADAM_FOLDER_ID,
  });
}

export async function uploadBriefToAmbaradam(options: {
  owner: string;
  text: string;
  title?: string;
}) {
  return driveService.uploadBrief({
    ...options,
    folderId: AMBARADAM_FOLDER_ID,
  });
}