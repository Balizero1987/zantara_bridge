name: Deploy Cloud Run (manual)

on:
  workflow_dispatch:

concurrency:
  group: cloudrun-prod
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install tools (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate required secrets
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          SA_JSON_SECRET_NAME: ${{ secrets.SA_JSON_SECRET_NAME }}
          OPENAI_API_KEY_SM_NAME: ${{ secrets.OPENAI_API_KEY_SM_NAME }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          set -euo pipefail
          missing=0
          for v in GCP_PROJECT_ID GCP_RUNTIME_SA_EMAIL SA_JSON_SECRET_NAME OPENAI_API_KEY_SM_NAME API_KEY; do
            if [[ -z "${!v}" ]]; then
              echo "::error::Missing secret: $v"
              missing=1
            fi
          done
          if [[ $missing -ne 0 ]]; then
            echo "Required secrets are missing. Configure them in repo settings."
            exit 1
          fi
          if [[ "$GCP_PROJECT_ID" =~ [[:space:]] ]]; then
            echo "::warning::GCP_PROJECT_ID contains whitespace; remove trailing spaces/newlines."
          fi

      - name: Preflight: identity and actAs check
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "$GCP_RUNTIME_SA_EMAIL" | tr -d '\r\n' | xargs)
          DEPLOY_SA=$(printf '%s' "$GCP_DEPLOY_SA_EMAIL" | tr -d '\r\n' | xargs)
          echo "Active identity: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"
          echo "Target project: $PROJECT_ID"
          echo "Runtime SA: $RUNTIME_SA"
          echo "Deploy SA:  $DEPLOY_SA"
          echo "Checking that both SAs exist in project..."
          gcloud iam service-accounts describe "$DEPLOY_SA" --project "$PROJECT_ID" >/dev/null || { echo "::error::Deploy SA non esiste: $DEPLOY_SA"; exit 1; }
          gcloud iam service-accounts describe "$RUNTIME_SA" --project "$PROJECT_ID" >/dev/null || { echo "::error::Runtime SA non esiste: $RUNTIME_SA"; exit 1; }
          echo "Checking actAs (iam.serviceAccounts.actAs) via test-iam-permissions..."
          PERMS=$(gcloud iam service-accounts test-iam-permissions "$RUNTIME_SA" \
            --project "$PROJECT_ID" \
            --permissions iam.serviceAccounts.actAs \
            --format='value(permissions)') || true
          if [[ "$PERMS" != *"iam.serviceAccounts.actAs"* ]]; then
            echo "::error::Manca il permesso iam.serviceAccounts.actAs per $DEPLOY_SA su $RUNTIME_SA"
            exit 1
          else
            echo "OK: actAs presente."
          fi

      - name: Preflight: Artifact Registry access
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          DEPLOY_SA=$(printf '%s' "$GCP_DEPLOY_SA_EMAIL" | tr -d '\r\n' | xargs)
          LOCATION=asia-southeast2
          REPO=zantara-repo
          IMAGE_PATH="$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO/zantara-chat:manual"
          echo "Verifica accesso Artifact Registry come deploy SA ($DEPLOY_SA)"
          if ! gcloud artifacts docker images describe "$IMAGE_PATH" --project "$PROJECT_ID" --location "$LOCATION" >/dev/null 2>&1; then
            echo "::error::Accesso negato a Artifact Registry per $DEPLOY_SA su repo $REPO ($LOCATION)"
            exit 1
          else
            echo "OK: Artifact Registry access (deploy SA)."
          fi

      - name: Preflight: Secret Manager versions
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SA_JSON_SECRET_NAME: ${{ secrets.SA_JSON_SECRET_NAME }}
          OPENAI_API_KEY_SM_NAME: ${{ secrets.OPENAI_API_KEY_SM_NAME }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          for S in "$SA_JSON_SECRET_NAME" "$OPENAI_API_KEY_SM_NAME"; do
            echo "Controllo segreto: $S"
            if ! gcloud secrets describe "$S" --project "$PROJECT_ID" >/dev/null 2>&1; then
              echo "::error::Secret non trovato: $S"
              exit 1
            fi
            EN_VER=$(gcloud secrets versions list "$S" --project "$PROJECT_ID" --filter='state=ENABLED' --format='value(name)' | head -n1)
            if [[ -z "$EN_VER" ]]; then
              echo "::error::Nessuna versione ENABLED per il secret $S"
              exit 1
            else
              echo "OK: versione abilitata trovata ($EN_VER) per $S"
            fi
          done

      - name: Deploy to Cloud Run
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          gcloud run deploy zantara-chat-v3 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --image "asia-southeast2-docker.pkg.dev/$PROJECT_ID/zantara-repo/zantara-chat:manual" \
            --service-account "$RUNTIME_SA" \
            --allow-unauthenticated \
            --set-env-vars "API_KEY=${{ secrets.API_KEY }},IMPERSONATE_USER=${{ secrets.IMPERSONATE_USER }},MEMORY_DRIVE_FOLDER_ID=${{ secrets.MEMORY_DRIVE_FOLDER_ID }},BALI_ZERO_CALENDAR_ID=${{ secrets.BALI_ZERO_CALENDAR_ID }},DRIVE_FOLDER_AMBARADAM=${{ secrets.DRIVE_FOLDER_AMBARADAM }},DEFAULT_FOLDER_ROOT=AMBARADAM,GMAIL_SENDER=${{ secrets.GMAIL_SENDER }},CORS_ORIGINS=${{ secrets.CORS_ORIGINS }},USE_AI_SUMMARY=${{ secrets.USE_AI_SUMMARY }}" \
            --set-secrets "SA_JSON_SECRET=${{ secrets.SA_JSON_SECRET_NAME }}:latest,GOOGLE_SERVICE_ACCOUNT_KEY=GOOGLE_SERVICE_ACCOUNT_KEY:latest,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_SM_NAME }}:latest"

      - name: Resolve Cloud Run URL
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          URL=$(gcloud run services describe zantara-chat-v3 --project "$PROJECT_ID" --region asia-southeast2 --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> "$GITHUB_ENV"
          echo "Resolved URL: $URL"

      - name: Export API key for post-deploy
        run: echo "API_KEY=${{ secrets.API_KEY }}" >> "$GITHUB_ENV"

      - name: Run post-deploy test
        run: bash ./post_deploy_check.sh

      - name: SA access smoke (/diag/drive or scripts)
        run: |
          set -euo pipefail
          : > sa_access.txt
          URL=$(gcloud run services describe "${{ env.SERVICE }}" --project "${{ secrets.GCP_PROJECT_ID }}" --region asia-southeast2 --format='value(status.url)')
          echo "SA access check â€” $(date -u --iso-8601=seconds)" | tee -a sa_access.txt
          if [[ -f scripts/smoke-drive.sh ]]; then
            echo "Running scripts/smoke-drive.sh" | tee -a sa_access.txt
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="${{ env.SERVICE }}" bash scripts/smoke-drive.sh 2>&1 | tee -a sa_access.txt
          else
            echo "Fallback: curl $URL/diag/drive" | tee -a sa_access.txt
            curl -sS "$URL/diag/drive" | tee -a sa_access.txt
          fi

      - name: Upload post-deploy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post_deploy_results.txt
          path: post_deploy_results.txt
          retention-days: 7

      - name: Upload SA access artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sa_access
          path: sa_access.txt
          retention-days: 7

      - name: Optional tests (scripts/test_upload.sh + scripts/test-sa-access.sh)
        run: |
          set +e
          : > test-output.log
          URL=$(gcloud run services describe "${{ env.SERVICE }}" --project "${{ secrets.GCP_PROJECT_ID }}" --region asia-southeast2 --format='value(status.url)')
          KEY="${{ secrets.API_KEY }}"
          if [[ -f scripts/test_upload.sh ]]; then
            echo "Running scripts/test_upload.sh" | tee -a test-output.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="${{ env.SERVICE }}" SERVICE_URL="$URL" KEY="$KEY" FOLDER_ID="${{ secrets.DRIVE_FOLDER_AMBARADAM }}" bash scripts/test_upload.sh >> test-output.log 2>&1 || echo "test_upload.sh failed" | tee -a test-output.log
          else
            echo "scripts/test_upload.sh not found" | tee -a test-output.log
          fi
          if [[ -f scripts/test-sa-access.sh ]]; then
            echo "Running scripts/test-sa-access.sh" | tee -a test-output.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="${{ env.SERVICE }}" bash scripts/test-sa-access.sh >> test-output.log 2>&1 || echo "test-sa-access.sh failed" | tee -a test-output.log
          else
            echo "scripts/test-sa-access.sh not found" | tee -a test-output.log
          fi

      - name: Upload optional tests artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test-output.log
          retention-days: 7

      - name: Optional SA direct access test (scripts/test-sa-access.sh)
        run: |
          set +e
          : > test-sa-access.log
          if [[ -f scripts/test-sa-access.sh ]]; then
            echo "Running scripts/test-sa-access.sh" | tee -a test-sa-access.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="${{ env.SERVICE }}" bash scripts/test-sa-access.sh >> test-sa-access.log 2>&1 || echo "test-sa-access.sh failed" | tee -a test-sa-access.log
          else
            echo "scripts/test-sa-access.sh not found" | tee -a test-sa-access.log
          fi
          true

      - name: Upload SA direct access test artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-sa-access
          path: test-sa-access.log
          retention-days: 7

      - name: Disable diagnostics (ENABLE_DIAG=false)
        if: ${{ success() }}
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          gcloud run services update zantara-chat-v3 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --set-env-vars "ENABLE_DIAG=false"
