name: Deploy Cloud Run

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: cloudrun-prod
  cancel-in-progress: true

jobs:
  pr-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: PR validation
        run: echo "PR check only. Skipping deploy."

  build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    steps:
        hotfix/fix-node-modules
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install tools (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Artifact Registry and image tag
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          REGION=asia-southeast2
          SHORT_SHA="${GITHUB_SHA::7}"
          IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/zantara-repo/zantara-chat:$SHORT_SHA"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_ENV"
          gcloud auth configure-docker "$REGION-docker.pkg.dev" -q

      - name: Build and push image
        run: |
          docker buildx build --platform linux/amd64 -t "$IMAGE_URI" --push .

      - name: Validate required secrets
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          set -euo pipefail
          missing=0
          for v in GCP_PROJECT_ID GCP_RUNTIME_SA_EMAIL API_KEY; do
            if [[ -z "${!v}" ]]; then
              echo "::error::Missing secret: $v"
              missing=1
            fi
          done
          if [[ $missing -ne 0 ]]; then exit 1; fi

      - name: Preflight: identity and actAs check
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "$GCP_RUNTIME_SA_EMAIL" | tr -d '\r\n' | xargs)
          DEPLOY_SA=$(printf '%s' "$GCP_DEPLOY_SA_EMAIL" | tr -d '\r\n' | xargs)
          gcloud iam service-accounts describe "$DEPLOY_SA" --project "$PROJECT_ID" >/dev/null
          gcloud iam service-accounts describe "$RUNTIME_SA" --project "$PROJECT_ID" >/dev/null
          echo "actAs check OK."

      - name: Preflight: Artifact Registry access
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          LOCATION=asia-southeast2
          REPO=zantara-repo
          gcloud artifacts repositories describe "$REPO" --location "$LOCATION" --project "$PROJECT_ID"

      - name: Deploy to Cloud Run
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          gcloud run deploy zantara-bridge-v2-prod \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --image "$IMAGE_URI" \
            --service-account "$RUNTIME_SA" \
            --allow-unauthenticated \
            --set-env-vars "CORS_ORIGINS=*.balizero.com,USE_AI_SUMMARY=false" \
            --set-secrets "BACKEND_API_KEY=ZANTARA_BACKEND_API_KEY:latest,PLUGIN_API_KEY=ZANTARA_PLUGIN_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest"

      - name: Resolve Cloud Run URL
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          URL=$(gcloud run services describe zantara-bridge-v2-prod --project "$PROJECT_ID" --region asia-southeast2 --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> "$GITHUB_ENV"
          echo "Resolved URL: $URL"

      - name: Smoke test /health
        run: |
          URL="$SERVICE_URL"
          RESP="$(curl -sS -w '\n%{http_code}' "$URL/health")"
          CODE="$(printf '%s' "$RESP" | tail -n1)"
          BODY="$(printf '%s\n' "$RESP" | sed '$d')"
          echo "HTTP $CODE — $BODY"
          if [[ "$CODE" != "200" ]]; then exit 1; fi
          if ! grep -Eq '"status":"healthy"|"ok":true' <<<"$BODY"; then exit 1; fixx

    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build (ts → js)
      run: |
        npm ci
        npm run build

    - name: Auth to Google Cloud (WIF - keyless)
      uses: google-github-actions/auth@v3
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v2

    - name: Build & Push image (Cloud Build)
      run: |
        IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.AR_REPO }}/bridge:${{ github.sha }}"
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        gcloud builds submit --tag "$IMAGE"

    - name: Deploy to Cloud Run (version pin secrets)
      run: |
        gcloud run deploy "${{ env.SERVICE }}" \
          --image "$IMAGE" \
          --region "${{ env.REGION }}" \
          --platform managed \
          --service-account "zantara@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com" \
          --update-secrets BACKEND_API_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/BACKEND_API_KEY:versions/2,OPENAI_API_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/OPENAI_API_KEY:versions/2,IMPERSONATE_USER=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/IMPERSONATE_USER:versions/1,GMAIL_SENDER=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/GMAIL_SENDER:versions/1,MEMORY_DRIVE_FOLDER_ID=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/MEMORY_DRIVE_FOLDER_ID:versions/1,DRIVE_ROOT_FOLDER_ID=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DRIVE_ROOT_FOLDER_ID:versions/1,BALI_ZERO_CALENDAR_ID=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/BALI_ZERO_CALENDAR_ID:versions/1 \
          --update-secrets "PLUGIN_API_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/PLUGIN_API_KEY:versions/${{ secrets.PIN_PLUGIN_KEY_VERSION || '1' }}" \
          --set-env-vars "CORS_ORIGINS=*.balizero.com,USE_AI_SUMMARY=false"

    - name: Smoke test (status+body on /health)
      shell: bash
      run: |
        set -euo pipefail
        URL="$(gcloud run services describe "${{ env.SERVICE }}" --region "${{ env.REGION }}" --format='value(status.url)')"
        echo "Service URL: $URL"

        RESP="$(curl -sS -w '\n%{http_code}' "$URL/health")"
        CODE="$(printf '%s' "$RESP" | tail -n1)"
        BODY="$(printf '%s\n' "$RESP" | sed '$d')"
        echo "HTTP $CODE — $BODY"

        if [[ "$CODE" != "200" ]]; then
          echo "Health failed ($CODE)"; exit 1
        fi

        if ! grep -Eq '"status":"healthy"|"ok":true' <<<"$BODY"; then
          echo "Body invalid: $BODY"; exit 1
        fi
        main
