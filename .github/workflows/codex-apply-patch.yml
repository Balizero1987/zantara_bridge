name: Codex Apply Patch
on:
  repository_dispatch:
    types: [codex-apply-patch]
permissions:
  contents: write
  pull-requests: write
jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Resolve inputs
        id: params
        shell: bash
        run: |
          set -euo pipefail
          echo "branch=${{ github.event.client_payload.branch }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.client_payload.title }}"  >> $GITHUB_OUTPUT
          echo "body=${{ github.event.client_payload.body }}"    >> $GITHUB_OUTPUT
          printf %s "${{ github.event.client_payload.patch_b64 }}" | base64 -d > patch.diff
          echo "Patch length: $(wc -c < patch.diff || true)"

      - name: Apply patch (with fallback)
        shell: bash
        run: |
          set -e
          git config user.name "Codex Bot"
          git config user.email "codex@zantara.ai"
          git checkout -B "${{ steps.params.outputs.branch }}"
          echo "Applying patch..."
          if ! git apply --whitespace=nowarn patch.diff; then
            echo "Fallback 3-way merge"
            git apply -3 --whitespace=nowarn patch.diff
          fi
          if find . -type f -name '*.rej' -print -quit | grep -q .; then
            echo "::error::Patch rejected"; exit 1
          fi
          git add -A
          git commit -m "${{ steps.params.outputs.title }}" || echo "No changes to commit"
          git push origin "${{ steps.params.outputs.branch }}" || echo "No changes pushed"

      - name: Open PR (github-script)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CODEX_DISPATCH_TOKEN }}
        env:
          BRANCH: ${{ steps.params.outputs.branch }}
          TITLE:  ${{ steps.params.outputs.title }}
          BODY:   ${{ steps.params.outputs.body }}
        script: |
          const { BRANCH, TITLE, BODY } = process.env;
          const { owner, repo } = context.repo;
          const prs = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${BRANCH}` });
          if (prs.data.length) { core.notice(`PR giÃ  aperta: ${prs.data[0].html_url}`); return; }
          const { data: pr } = await github.rest.pulls.create({
            owner, repo, head: BRANCH, base: 'main',
            title: TITLE || 'Codex Patch', body: BODY || ''
          });
          core.notice(`PR creata: ${pr.html_url}`);
