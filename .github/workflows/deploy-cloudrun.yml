name: Deploy Cloud Run

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: cloudrun-prod
  cancel-in-progress: true

jobs:
  pr-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: PR validation
        run: echo "PR check only. Skipping deploy."

  build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    env:
      REGION: asia-southeast2
      SERVICE: zantara-chat-v3-1064094238013
      AR_REPO: zantara-repo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build project
        run: |
          npm ci
          npm run build

      - name: Configure Artifact Registry and image tag
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          REGION=asia-southeast2
          SHORT_SHA="${GITHUB_SHA::7}"
          IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/zantara-repo/zantara-chat:$SHORT_SHA"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_ENV"
          gcloud auth configure-docker "$REGION-docker.pkg.dev" -q
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Build & Push Docker image
        run: |
          docker buildx build --platform linux/amd64 -t "$IMAGE_URI" --push .

      - name: Validate required secrets
        run: |
          set -euo pipefail
          missing=0
          for v in GCP_PROJECT_ID GCP_RUNTIME_SA_EMAIL; do
            if [[ -z "${!v}" ]]; then
              echo "::error::Missing secret: $v"
              missing=1
            fi
          done
          if [[ $missing -ne 0 ]]; then exit 1; fi
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}

      - name: "Preflight: identity and actAs check"
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "$GCP_RUNTIME_SA_EMAIL" | tr -d '\r\n' | xargs)
          DEPLOY_SA=$(printf '%s' "$GCP_DEPLOY_SA_EMAIL" | tr -d '\r\n' | xargs)
          gcloud iam service-accounts describe "$DEPLOY_SA" --project "$PROJECT_ID" >/dev/null
          gcloud iam service-accounts describe "$RUNTIME_SA" --project "$PROJECT_ID" >/dev/null
          echo "actAs check OK."
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      - name: "Preflight: Artifact Registry access"
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          LOCATION=asia-southeast2
          REPO=zantara-repo
          gcloud artifacts repositories describe "$REPO" --location "$LOCATION" --project "$PROJECT_ID"
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          gcloud run deploy zantara-chat-v3-1064094238013 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --image "$IMAGE_URI" \
            --service-account "$RUNTIME_SA" \
            --allow-unauthenticated \
            --no-build \
            --set-env-vars "CORS_ORIGINS=*.balizero.com,USE_AI_SUMMARY=false" \
            --set-secrets "BACKEND_API_KEY=ZANTARA_BACKEND_API_KEY:2,PLUGIN_API_KEY=ZANTARA_PLUGIN_API_KEY:1,OPENAI_API_KEY=OPENAI_API_KEY:2"

      - name: Resolve Cloud Run URL
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          URL=$(gcloud run services describe zantara-chat-v3-1064094238013 --project "$PROJECT_ID" --region asia-southeast2 --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> "$GITHUB_ENV"
          echo "Resolved URL: $URL"

      - name: Smoke test /health
        run: |
          URL="$SERVICE_URL"
          RESP="$(curl -sS -w '\n%{http_code}' "$URL/health")"
          CODE="$(printf '%s' "$RESP" | tail -n1)"
          BODY="$(printf '%s\n' "$RESP" | sed '$d')"
          echo "HTTP $CODE — $BODY"
          if [[ "$CODE" != "200" ]]; then exit 1; fi
          if ! grep -Eq '"status":"healthy"|"ok":true' <<<"$BODY"; then exit 1; fi

      - name: Post-deploy smoke tests
        run: |
          URL="$SERVICE_URL"
          KEY="$(gcloud secrets versions access latest \
            --secret=ZANTARA_PLUGIN_API_KEY --project ${{ secrets.GCP_PROJECT_ID }} | tr -d '\n\r')"

          echo "Service URL: $URL"

          # Notes
          curl -fsS -X POST "$URL/api/notes" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: $KEY" -H "X-BZ-USER: boss" \
            -d '{"title":"CI test","content":"smoke"}' | jq .

          # Chat
          curl -fsS -X POST "$URL/api/chat" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: $KEY" -H "X-BZ-USER: boss" \
            -d '{"message":"ping","ririMode":true}' | jq .

          # Drive brief
          TODAY=$(date -u +"%Y-%m-%d")
          BRIEF_RESP="$(curl -fsS -X POST "$URL/api/drive/brief" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: $KEY" -H "X-BZ-USER: boss" \
            -d "{\"dateKey\":\"$TODAY\"}")"
          
          echo "Drive brief response: $BRIEF_RESP"
          
          # Validate response has ok=true
          if ! echo "$BRIEF_RESP" | jq -e '.ok == true' > /dev/null; then
            echo "ERROR: Drive brief failed - ok != true"
            exit 1
          fi
          
          echo "✅ All smoke tests passed"