name: Deploy Cloud Run

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: cloudrun-prod
  cancel-in-progress: true

jobs:
  pr-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: PR validation
        run: echo "PR check only. Skipping deploy."

  build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install tools (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Artifact Registry and image tag
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          REGION=asia-southeast2
          SHORT_SHA="${GITHUB_SHA::7}"
          IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/zantara-repo/zantara-chat:$SHORT_SHA"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_ENV"
          gcloud auth configure-docker "$REGION-docker.pkg.dev" -q

      - name: Build and push image
        run: |
          docker buildx build --platform linux/amd64 -t "$IMAGE_URI" --push .

      - name: Validate required secrets
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          SA_JSON_SECRET_NAME: ${{ secrets.SA_JSON_SECRET_NAME }}
          OPENAI_API_KEY_SM_NAME: ${{ secrets.OPENAI_API_KEY_SM_NAME }}
          ZANTARA_BACKEND_API_KEY: ${{ secrets.ZANTARA_BACKEND_API_KEY }}
        run: |
          set -euo pipefail
          missing=0
          for v in GCP_PROJECT_ID GCP_RUNTIME_SA_EMAIL SA_JSON_SECRET_NAME OPENAI_API_KEY_SM_NAME ZANTARA_BACKEND_API_KEY; do
            if [[ -z "${!v}" ]]; then
              echo "::error::Missing secret: $v";
              missing=1
            fi
          done
          if [[ $missing -ne 0 ]]; then
            echo "Required secrets are missing. Configure them in repo settings.";
            exit 1
          fi

      - name: "Preflight: identity and actAs check"
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_RUNTIME_SA_EMAIL: ${{ secrets.GCP_RUNTIME_SA_EMAIL }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "$GCP_RUNTIME_SA_EMAIL" | tr -d '\r\n' | xargs)
          DEPLOY_SA=$(printf '%s' "$GCP_DEPLOY_SA_EMAIL" | tr -d '\r\n' | xargs)
          gcloud iam service-accounts describe "$DEPLOY_SA" --project "$PROJECT_ID" >/dev/null
          gcloud iam service-accounts describe "$RUNTIME_SA" --project "$PROJECT_ID" >/dev/null
          echo "actAs check OK."

      - name: "Preflight: Artifact Registry access"
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEPLOY_SA_EMAIL: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          LOCATION=asia-southeast2
          REPO=zantara-repo
          IMAGE_PATH="$IMAGE_URI"
          gcloud artifacts docker images describe "$IMAGE_PATH" --project "$PROJECT_ID" --location "$LOCATION" >/dev/null

      - name: "Preflight: Secret Manager versions"
        shell: bash
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SA_JSON_SECRET_NAME: ${{ secrets.SA_JSON_SECRET_NAME }}
          OPENAI_API_KEY_SM_NAME: ${{ secrets.OPENAI_API_KEY_SM_NAME }}
        run: |
          set -euo pipefail
          PROJECT_ID=$(printf '%s' "$GCP_PROJECT_ID" | tr -d '\r\n' | xargs)
          gcloud secrets describe "$SA_JSON_SECRET_NAME" --project "$PROJECT_ID" >/dev/null
          gcloud secrets describe "$OPENAI_API_KEY_SM_NAME" --project "$PROJECT_ID" >/dev/null

      - name: Deploy to Cloud Run
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          gcloud run deploy zantara-chat-v3 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --image "$IMAGE_URI" \
            --service-account "$RUNTIME_SA" \
            --allow-unauthenticated \
        codex/fix-workflows-in-ci/cd-pipelines
            --set-env-vars "API_KEY=${{ secrets.ZANTARA_BACKEND_API_KEY }},IMPERSONATE_USER=${{ secrets.IMPERSONATE_USER }},MEMORY_DRIVE_FOLDER_ID=${{ secrets.MEMORY_DRIVE_FOLDER_ID }},BALI_ZERO_CALENDAR_ID=${{ secrets.BALI_ZERO_CALENDAR_ID }},ZANTARA_SHARED_DRIVE_ID=${{ secrets.ZANTARA_SHARED_DRIVE_ID }},GMAIL_SENDER=${{ secrets.GMAIL_SENDER }},CORS_ORIGINS=${{ secrets.CORS_ORIGINS }},USE_AI_SUMMARY=${{ secrets.USE_AI_SUMMARY }}" \
            --set-secrets "SA_JSON_SECRET=${SA_JSON_SM}:latest,OPENAI_API_KEY=${OPENAI_SM}:latest"

      - name: Create failure artifact if missing
        if: always()
        run: |
          if [[ ! -f post_deploy_results.txt ]]; then
            {
              echo "status: failure"
              echo "reason: deploy step failed or tests not executed"
              echo "hint: controlla il binding actAs sul Service Account runtime"
            } > post_deploy_results.txt
          fi

            --set-env-vars "API_KEY=${{ secrets.API_KEY }},IMPERSONATE_USER=${{ secrets.IMPERSONATE_USER }},MEMORY_DRIVE_FOLDER_ID=${{ secrets.MEMORY_DRIVE_FOLDER_ID }},BALI_ZERO_CALENDAR_ID=${{ secrets.BALI_ZERO_CALENDAR_ID }},ZANTARA_SHARED_DRIVE_ID=${{ secrets.ZANTARA_SHARED_DRIVE_ID }},GMAIL_SENDER=${{ secrets.GMAIL_SENDER }},CORS_ORIGINS=${{ secrets.CORS_ORIGINS }},USE_AI_SUMMARY=${{ secrets.USE_AI_SUMMARY }}" \
            --set-secrets "SA_JSON_SECRET=${{ secrets.SA_JSON_SECRET_NAME }}:latest,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_SM_NAME }}:latest"
        main

      - name: Resolve Cloud Run URL
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          URL=$(gcloud run services describe zantara-chat-v3 --project "$PROJECT_ID" --region asia-southeast2 --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> "$GITHUB_ENV"
          echo "Resolved URL: $URL"

        codex/fix-workflows-in-ci/cd-pipelines
      - name: Export API key for post-deploy
        run: echo "API_KEY=${{ secrets.ZANTARA_BACKEND_API_KEY }}" >> "$GITHUB_ENV"

      - name: Run post-deploy test
        run: bash ./post_deploy_check.sh

      - name: Upload post-deploy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post_deploy_results.txt
          path: post_deploy_results.txt
          retention-days: 7

      - name: Comment status on commit
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = core.getInput('job-status') || process.env['JOB_STATUS'] || '${{ job.status }}';
            const url = process.env['GITHUB_SERVER_URL'] + '/' + process.env['GITHUB_REPOSITORY'] + '/actions/runs/' + process.env['GITHUB_RUN_ID'];
            const body = `Cloud Run deploy ${status}\n\nImage: ${process.env.IMAGE_URI || '(n/a)'}\nRun: ${url}`;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body
            });

      - name: Smoke test /health
        run: |
          URL="$SERVICE_URL"
          RESP="$(curl -sS -w '\n%{http_code}' "$URL/health")"
          CODE="$(printf '%s' "$RESP" | tail -n1)"
          BODY="$(printf '%s\n' "$RESP" | sed '$d')"
          echo "HTTP $CODE â€” $BODY"
          if [[ "$CODE" != "200" ]]; then exit 1; fi
          if ! grep -Eq '"status":"healthy"|"ok":true' <<<"$BODY"; then exit 1; fi
        main
