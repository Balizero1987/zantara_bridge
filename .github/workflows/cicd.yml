name: Zantara CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: |
          npm run build
          test -f dist/routes/api/driveBrief.js

      # ðŸ”‘ Autenticazione con GCP usando il secret che hai creato
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Configura gcloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # ðŸ”§ Deploy su Cloud Run (immagine giÃ  pushata; nessuna build inline)
      - name: Deploy to Cloud Run
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          gcloud run deploy zantara-chat-v3-1064094238013 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --image "$IMAGE_URI" \
            --service-account "$RUNTIME_SA" \
            --allow-unauthenticated \
            --set-env-vars "CORS_ORIGINS=*.balizero.com,USE_AI_SUMMARY=false,DRIVE_FOLDER_AMBARADAM=${{ secrets.DRIVE_FOLDER_AMBARADAM }},DEFAULT_FOLDER_ROOT=AMBARADAM" \
            --set-secrets "BACKEND_API_KEY=ZANTARA_BACKEND_API_KEY:latest,PLUGIN_API_KEY=ZANTARA_PLUGIN_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GOOGLE_SERVICE_ACCOUNT_KEY=GOOGLE_SERVICE_ACCOUNT_KEY:latest"

      - name: SA access smoke (/diag/drive or scripts)
        run: |
          set -euo pipefail
          : > sa_access.txt
          URL=$(gcloud run services describe zantara-chat-v3-1064094238013 --project "${{ secrets.GCP_PROJECT_ID }}" --region asia-southeast2 --format='value(status.url)')
          echo "SA access check â€” $(date -u --iso-8601=seconds)" | tee -a sa_access.txt
          if [[ -f scripts/smoke-drive.sh ]]; then
            echo "Running scripts/smoke-drive.sh" | tee -a sa_access.txt
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="zantara-chat-v3-1064094238013" bash scripts/smoke-drive.sh 2>&1 | tee -a sa_access.txt
          else
            echo "Fallback: curl $URL/diag/drive" | tee -a sa_access.txt
            curl -sS "$URL/diag/drive" | tee -a sa_access.txt
          fi

      - name: Upload SA access artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sa_access
          path: sa_access.txt
          retention-days: 7

      - name: Optional tests (scripts/test_upload.sh + scripts/test-sa-access.sh)
        run: |
          set +e
          : > test-output.log
          URL=$(gcloud run services describe zantara-chat-v3-1064094238013 --project "${{ secrets.GCP_PROJECT_ID }}" --region asia-southeast2 --format='value(status.url)')
          KEY="$(gcloud secrets versions access latest --secret=ZANTARA_PLUGIN_API_KEY --project ${{ secrets.GCP_PROJECT_ID }} | tr -d '\n\r')"
          if [[ -f scripts/test_upload.sh ]]; then
            echo "Running scripts/test_upload.sh" | tee -a test-output.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="zantara-chat-v3-1064094238013" SERVICE_URL="$URL" KEY="$KEY" FOLDER_ID="${{ secrets.DRIVE_FOLDER_AMBARADAM }}" bash scripts/test_upload.sh >> test-output.log 2>&1 || echo "test_upload.sh failed" | tee -a test-output.log
          else
            echo "scripts/test_upload.sh not found" | tee -a test-output.log
          fi
          if [[ -f scripts/test-sa-access.sh ]]; then
            echo "Running scripts/test-sa-access.sh" | tee -a test-output.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="zantara-chat-v3-1064094238013" bash scripts/test-sa-access.sh >> test-output.log 2>&1 || echo "test-sa-access.sh failed" | tee -a test-output.log
          else
            echo "scripts/test-sa-access.sh not found" | tee -a test-output.log
          fi

      - name: Upload optional tests artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test-output.log
          retention-days: 7

      - name: Optional SA direct access test (scripts/test-sa-access.sh)
        run: |
          set +e
          : > test-sa-access.log
          if [[ -f scripts/test-sa-access.sh ]]; then
            echo "Running scripts/test-sa-access.sh" | tee -a test-sa-access.log
            PROJ="${{ secrets.GCP_PROJECT_ID }}" REGION="asia-southeast2" SERVICE="zantara-chat-v3-1064094238013" bash scripts/test-sa-access.sh >> test-sa-access.log 2>&1 || echo "test-sa-access.sh failed" | tee -a test-sa-access.log
          else
            echo "scripts/test-sa-access.sh not found" | tee -a test-sa-access.log
          fi
          true

      - name: Upload SA direct access test artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-sa-access
          path: test-sa-access.log
          retention-days: 7

      - name: Optional IAM check (zero roles on runtime SA)
        run: |
          set +e
          : > iam-check.log
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          RUNTIME_SA=$(printf '%s' "${{ secrets.GCP_RUNTIME_SA_EMAIL }}" | tr -d '\r\n' | xargs)
          ZERO="zero@balizero.com"
          echo "Checking IAM policy on $RUNTIME_SA for $ZERO" | tee -a iam-check.log
          gcloud iam service-accounts get-iam-policy "$RUNTIME_SA" --project "$PROJECT_ID" --format=json | tee iam-policy.json >/dev/null 2>&1
          if command -v jq >/dev/null 2>&1; then
            HAS_USER=$(jq -r --arg ZERO "$ZERO" '.bindings[] | select(.members[]?==("user:"+$ZERO)) | .role' iam-policy.json | tr '\n' ',' )
            echo "Bindings for $ZERO: ${HAS_USER:-<none>}" | tee -a iam-check.log
            echo "$HAS_USER" | grep -q 'roles/iam.serviceAccountUser' && echo "âœ“ serviceAccountUser present" | tee -a iam-check.log || echo "âœ— serviceAccountUser missing" | tee -a iam-check.log
            echo "$HAS_USER" | grep -q 'roles/iam.serviceAccountTokenCreator' && echo "âœ“ tokenCreator present" | tee -a iam-check.log || echo "âœ— tokenCreator missing" | tee -a iam-check.log
          else
            echo "jq not available; dumping raw policy" | tee -a iam-check.log
            cat iam-policy.json | tee -a iam-check.log >/dev/null
          fi
          true

      - name: Upload IAM check artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iam-check
          path: iam-check.log
          retention-days: 7

      - name: Disable diagnostics (ENABLE_DIAG=false)
        if: ${{ success() }}
        run: |
          PROJECT_ID=$(printf '%s' "${{ secrets.GCP_PROJECT_ID }}" | tr -d '\r\n' | xargs)
          gcloud run services update zantara-chat-v3-1064094238013 \
            --project "$PROJECT_ID" \
            --region asia-southeast2 \
            --set-env-vars "ENABLE_DIAG=false"
